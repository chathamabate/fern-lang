
Introductory Notes:

    fern-lang will be a systems level language for the 8086.
    It will be designed such that all aspects of an operating
    system can be written in fern-lang. Thus, it will
    support assembly sections and higher level sections.

    Assembly sections will be denoted with "asm".
    Higher level sections will be denoted with "abstract".

Data Types:

    Primitives:
        u8  - unsigned 8-bit integer. (or ascii character)
        u16 - unsigned 16-bit integer.
        s8  - signed 8-bit integer.
        s16 - signed 16-bit integer.

    Pointers:
        @[T] - a 16-bit offset into the stack, pointing to a value of type T.
        *[T] - a 32-bit value (offset and segment) pointing to a value of type T.

        NOTE: both sptr and ptr can be used in an array fashion.

    Procedures:
        near(T1, T2, T3, ...) - A 16-bit offset into the current code segment
                                pointing to a procedure accepting T1... as paramenters.
        far(T1, T2, T3, ...)  - A 32-bit segment and offset of a procedure accepting
                                T1... as parameters.
    
    Structures and Arrays: 
        c[T] - An array of type T with constant length c.

        { T1 L1; T2 L2; ... } - A structure is a composite type.

        NOTE: for a structure to be used as a type, it must be named separately.
        This is unique to structures.

    Constants:
        const T - A value of type T which is unchanging.

    Grammar:

<prim>  ::= u8 | u16 | s8 | s16
<ptr>   ::= @[<type>] | \*[<type>]
<proc>  ::= near\( (<type>(, <type>)*)? \) 
          | far\( (<type>(, <type>)*)? \) 
<arr>   ::= <num>[<type>]
<const> ::= const <type>




<strct> ::= { (<type> <name>;)+ }


Section Types:

    Bare Assembly:
        - Labeled
        - Globally accessible code section

    Type Definition:
        - A defintion of a globally usable type.

    Assembly Procedure: 
        - Typed procedure written in Assembly.

    Abstract Procedure:
        - Type procedure written in higher level lang.

Data Types:
    
    <Prim> ::= u8 | u16 | s8 | s16





All flc languages will be parsed with the same frontend.
As the fern-lang variants will all be low-level in nature,
flc will allow for intermixing of the representations.

i.e. Assembly can appear in the same file as a higher lever
representation.

At the top of any source file (regardless of languages used),
must be a "location header".

This will tell the compiler where the given program is going
to sit in memory. A segment and offset must be provided.

Preprocessor:

    Write preprocessor later...
    Simple copy and paste.

Language Sections:

language flasm {

}

Dual Pass:

    There must be a universal procedure format in assembly
    which all higher level representations are gauranteed to follow?
    Bruh, this is lowkey tough af...


Operand Types:

    Below are all recognized operands which are syntactically
    unique. 

    General Purpose Register:
        Byte Length:
            AL, CL, DL, BL, AH, CH, DH, BH
        Word Length:
            AX, CX, DX, BX, SP, BP, SI, DI

    Segment Register:
        ES, CS, SS, DS

    Immediate
        Note that the width of an immediate is inferred
        from its parent instruction. An immediate
        will either be interpreted as a 8-bit or 16-bit value.
    
    Memory:
        Byte Offset  
        Word Offset  
        Only Base or Index:
            BX, BP, SI, DI
        Base/Index + Byte Displacement
            (BX/BP/SI/DI) + D8
        Base/Index + Word Displacement
            (BX/BP/SI/DI) + D16
        Base + Index
            (BX/BP) + (SI/DI)
        Base + Index + Byte Displacement
            (BX/BP) + (SI/DI) + D8
        Base + Index + Word Displacement
            (BX/BP) + (SI/DI) + D16

    memptr32:
        32-bit immediate representing segment and 
        offset. Note, that an Immediate can be used
        as a 16-bit code segment offset.
   
    Label:
        Note that for now, all labels will resolve to
        16-bit current code segment offsets.

        Local Label
            (Ex .loop .end .continue)
        Global Label 
            (Ex puts printf start_kernel)

Syntax:

macros???

<Label> ::= ...

<Instr> ::= ...
    
