
Introductory Notes:

    fern-lang will be a systems level language for the 8086.
    It will be designed such that all aspects of an operating
    system can be written in fern-lang. Thus, it will
    support assembly sections and higher level sections.


Section Types:

    Bare Assembly:
        - Labeled
        - Globally accessible code section

    Type Definition:
        - A defintion of a globally usable type.

    Assembly Procedure: 
        - Typed procedure written in Assembly.

    Abstract Procedure:
        - Type procedure written in higher level lang.

Data Types:
    
    <Prim> ::= u8 | u16 | s8 | s16





All flc languages will be parsed with the same frontend.
As the fern-lang variants will all be low-level in nature,
flc will allow for intermixing of the representations.

i.e. Assembly can appear in the same file as a higher lever
representation.

At the top of any source file (regardless of languages used),
must be a "location header".

This will tell the compiler where the given program is going
to sit in memory. A segment and offset must be provided.

Preprocessor:

    Write preprocessor later...
    Simple copy and paste.

Language Sections:

language flasm {

}

Dual Pass:

    There must be a universal procedure format in assembly
    which all higher level representations are gauranteed to follow?
    Bruh, this is lowkey tough af...


Operand Types:

    Below are all recognized operands which are syntactically
    unique. 

    General Purpose Register:
        Byte Length:
            AL, CL, DL, BL, AH, CH, DH, BH
        Word Length:
            AX, CX, DX, BX, SP, BP, SI, DI

    Segment Register:
        ES, CS, SS, DS

    Immediate
        Note that the width of an immediate is inferred
        from its parent instruction. An immediate
        will either be interpreted as a 8-bit or 16-bit value.
    
    Memory:
        Byte Offset  
        Word Offset  
        Only Base or Index:
            BX, BP, SI, DI
        Base/Index + Byte Displacement
            (BX/BP/SI/DI) + D8
        Base/Index + Word Displacement
            (BX/BP/SI/DI) + D16
        Base + Index
            (BX/BP) + (SI/DI)
        Base + Index + Byte Displacement
            (BX/BP) + (SI/DI) + D8
        Base + Index + Word Displacement
            (BX/BP) + (SI/DI) + D16

    memptr32:
        32-bit immediate representing segment and 
        offset. Note, that an Immediate can be used
        as a 16-bit code segment offset.
   
    Label:
        Note that for now, all labels will resolve to
        16-bit current code segment offsets.

        Local Label
            (Ex .loop .end .continue)
        Global Label 
            (Ex puts printf start_kernel)

Syntax:

macros???

<Label> ::= ...

<Instr> ::= ...
    
