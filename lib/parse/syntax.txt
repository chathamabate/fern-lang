
Introductory Notes:

    fern-lang will be a systems level language for the 8086.
    It will be designed such that all aspects of an operating
    system can be written in fern-lang. Thus, it will
    support assembly sections and higher level sections.

    Assembly sections will be denoted with "asm".
    Higher level sections will be denoted with "abstract".

Data Types:

    Primitives:
        u8  - unsigned 8-bit integer. (or ascii character)
        u16 - unsigned 16-bit integer.
        s8  - signed 8-bit integer.
        s16 - signed 16-bit integer.

    Pointers:
        *T - a 32-bit value (offset and segment) pointing to a value of type T.

    Procedures:
        local(T1, T2, T3, ...)  - A 16-bit offset into the current code segment
                                  pointing to a procedure accepting T1... as paramenters.
        global(T1, T2, T3, ...) - A 32-bit segment and offset of a procedure accepting
                                  T1... as parameters.
        
        NOTE: Procedure types are never standalone. They must be pointed to!
    
    Structures and Arrays: 
        [c]T- An array of type T with constant length c.

        { T1 L1; T2 L2; ... } - A structure is a composite type.
        
        NOTE: The labels are used to access the fields of the structure.
        They are not necessary for type equivelance. Two structures with
        the same field types are equivelant, regardless of the fields labels.

    Constants:
        const T - A value of type T which is unchanging.

Sections Types:

    A fern lang program will be broken into independent sections.
    The order of the given sections will be preserved during compilation.

    meta section:
        This section contains information about the binary to be compiled.
        It is REQUIRED to be the first section of the source file.

        meta {
            <Attribute> = Value;
            ...
        }

        Attributes:
            <segment> (u16) - Segment this binary will be placed in.
            <offset>  (u16) - Offset of this binary in its segment.

        NOTE: add this into the preprocessor... not source!

    type section:
        A type section is for defining a single type.
    
        type <name> <type>

        This section alone adds nothing to the binary.
        The defined type's structure is used in procedures which
        reference it.

    data section:
        A data section stores data in the binary.
        A data section's data need not be constant (but it can be if desired).
        A data section's data may be initialized, or not.

        data <name> {
            <type> <name> (= <value>)?;
            ...
        }

    raw section:
        A raw section is written only in assembly and has no native support
        for fields or parameters. 
        It can be used to hold data, but this is not advisable.
        It can be used to write high performance code which does not
        match the format of traditional procedures.
        For example, a raw section might represent a function whose
        parameters are passed through registers.

        raw <name> {
            // assembly code...
        }

    procedure section:
        A procedure is a section of program text.
        A procedure has parameters and fields.
        A procedure's text can be written in assembly and/or abstract code.
        A procedure can be marked as local or global.
        A global procedure can be called from anywhere.
        A local procedure can only be called from within its parent segment.

        (local|global) proc 
        <name>(params...)
        [fields...]
        {
        abstract:
            // abstract text...
        asm:
            // assembly text...
        } 

Abstract Code Notes:


Assembly Notes:

    Below are all recognized operands which are syntactically
    unique. 

    General Purpose Register:
        Byte Length:
            AL, CL, DL, BL, AH, CH, DH, BH
        Word Length:
            AX, CX, DX, BX, SP, BP, SI, DI

    Segment Register:
        ES, CS, SS, DS

    Immediate
        Note that the width of an immediate is inferred
        from its parent instruction. An immediate
        will either be interpreted as a 8-bit or 16-bit value.
    
    Memory:
        Byte Offset  
        Word Offset  
        Only Base or Index:
            BX, BP, SI, DI
        Base/Index + Byte Displacement
            (BX/BP/SI/DI) + D8
        Base/Index + Word Displacement
            (BX/BP/SI/DI) + D16
        Base + Index
            (BX/BP) + (SI/DI)
        Base + Index + Byte Displacement
            (BX/BP) + (SI/DI) + D8
        Base + Index + Word Displacement
            (BX/BP) + (SI/DI) + D16

    memptr32:
        32-bit immediate representing segment and 
        offset. Note, that an Immediate can be used
        as a 16-bit code segment offset.
   
    Label:
        Note that for now, all labels will resolve to
        16-bit current code segment offsets.

        Local Label
            (Ex .loop .end .continue)
        Global Label 
            (Ex puts printf start_kernel)

    
